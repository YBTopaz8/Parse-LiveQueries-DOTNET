name: NuGet Release Automation

on:
  push:
    branches:
      - master

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags and commit messages

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0'  # Or the highest .NET SDK version you need

      - name: Update Workloads
        run: dotnet workload update

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Get NuGet package version from tag
        id: get_version
        run: |
          echo "NUGET_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $env:GITHUB_OUTPUT
          echo "Version is ${{ steps.get_version.outputs.NUGET_VERSION }}"

      - name: Get Commit/PR Message
        id: get_message
        run: |
          if [ "${{ github.event.pull_request }}" != "" ]; then  # Check if it's a PR merge
            echo "RELEASE_MESSAGE=$(gh pr view ${{ github.event.pull_request.number }} --json title,body -q '.title' && echo "" && gh pr view ${{ github.event.pull_request.number }} --json body -q '.body')" >> $env:GITHUB_OUTPUT
          else  # It's a direct commit to master
            echo "RELEASE_MESSAGE=$(git log -1 --pretty=%B)" >> $env:GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pack NuGet package
        run: dotnet pack --configuration Release -o . /p:Version=${{ steps.get_version.outputs.NUGET_VERSION }}

      - name: Push NuGet package to NuGet.org
        if: startsWith(github.ref, 'refs/heads/master')
        run: dotnet nuget push "*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
        working-directory: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.NUGET_VERSION }}  #Prepend 'v'
          name: Release v${{ steps.get_version.outputs.NUGET_VERSION }} #Prepend 'v'
          body: ${{ steps.get_message.outputs.RELEASE_MESSAGE }} # Use the commit/PR message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        if: github.event.pull_request != null #Only install if needed
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y